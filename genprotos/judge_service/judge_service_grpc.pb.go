// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: judge_service_protos/judge_service.proto

package judge_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JudgeService_CreateProblem_FullMethodName   = "/judge_service.JudgeService/CreateProblem"
	JudgeService_GetProblem_FullMethodName      = "/judge_service.JudgeService/GetProblem"
	JudgeService_UpdateProblem_FullMethodName   = "/judge_service.JudgeService/UpdateProblem"
	JudgeService_DeleteProblem_FullMethodName   = "/judge_service.JudgeService/DeleteProblem"
	JudgeService_JudgeSubmission_FullMethodName = "/judge_service.JudgeService/JudgeSubmission"
	JudgeService_GetProblems_FullMethodName     = "/judge_service.JudgeService/GetProblems"
)

// JudgeServiceClient is the client API for JudgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JudgeService is responsible for managing problems and executing code submissions.
type JudgeServiceClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*Problem, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*Problem, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*Problem, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error)
	JudgeSubmission(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JudgeStreamResponse], error)
	GetProblems(ctx context.Context, in *GetProblemsRequest, opts ...grpc.CallOption) (*GetProblemsResponse, error)
}

type judgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgeServiceClient(cc grpc.ClientConnInterface) JudgeServiceClient {
	return &judgeServiceClient{cc}
}

func (c *judgeServiceClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*Problem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Problem)
	err := c.cc.Invoke(ctx, JudgeService_CreateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*Problem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Problem)
	err := c.cc.Invoke(ctx, JudgeService_GetProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*Problem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Problem)
	err := c.cc.Invoke(ctx, JudgeService_UpdateProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProblemResponse)
	err := c.cc.Invoke(ctx, JudgeService_DeleteProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) JudgeSubmission(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JudgeStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JudgeService_ServiceDesc.Streams[0], JudgeService_JudgeSubmission_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubmissionRequest, JudgeStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JudgeService_JudgeSubmissionClient = grpc.ServerStreamingClient[JudgeStreamResponse]

func (c *judgeServiceClient) GetProblems(ctx context.Context, in *GetProblemsRequest, opts ...grpc.CallOption) (*GetProblemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProblemsResponse)
	err := c.cc.Invoke(ctx, JudgeService_GetProblems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgeServiceServer is the server API for JudgeService service.
// All implementations must embed UnimplementedJudgeServiceServer
// for forward compatibility.
//
// JudgeService is responsible for managing problems and executing code submissions.
type JudgeServiceServer interface {
	CreateProblem(context.Context, *CreateProblemRequest) (*Problem, error)
	GetProblem(context.Context, *GetProblemRequest) (*Problem, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*Problem, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error)
	JudgeSubmission(*SubmissionRequest, grpc.ServerStreamingServer[JudgeStreamResponse]) error
	GetProblems(context.Context, *GetProblemsRequest) (*GetProblemsResponse, error)
	mustEmbedUnimplementedJudgeServiceServer()
}

// UnimplementedJudgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJudgeServiceServer struct{}

func (UnimplementedJudgeServiceServer) CreateProblem(context.Context, *CreateProblemRequest) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedJudgeServiceServer) GetProblem(context.Context, *GetProblemRequest) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedJudgeServiceServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*Problem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedJudgeServiceServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedJudgeServiceServer) JudgeSubmission(*SubmissionRequest, grpc.ServerStreamingServer[JudgeStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method JudgeSubmission not implemented")
}
func (UnimplementedJudgeServiceServer) GetProblems(context.Context, *GetProblemsRequest) (*GetProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblems not implemented")
}
func (UnimplementedJudgeServiceServer) mustEmbedUnimplementedJudgeServiceServer() {}
func (UnimplementedJudgeServiceServer) testEmbeddedByValue()                      {}

// UnsafeJudgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgeServiceServer will
// result in compilation errors.
type UnsafeJudgeServiceServer interface {
	mustEmbedUnimplementedJudgeServiceServer()
}

func RegisterJudgeServiceServer(s grpc.ServiceRegistrar, srv JudgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedJudgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JudgeService_ServiceDesc, srv)
}

func _JudgeService_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_GetProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_JudgeSubmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubmissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JudgeServiceServer).JudgeSubmission(m, &grpc.GenericServerStream[SubmissionRequest, JudgeStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JudgeService_JudgeSubmissionServer = grpc.ServerStreamingServer[JudgeStreamResponse]

func _JudgeService_GetProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).GetProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_GetProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).GetProblems(ctx, req.(*GetProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JudgeService_ServiceDesc is the grpc.ServiceDesc for JudgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JudgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "judge_service.JudgeService",
	HandlerType: (*JudgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _JudgeService_CreateProblem_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _JudgeService_GetProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _JudgeService_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _JudgeService_DeleteProblem_Handler,
		},
		{
			MethodName: "GetProblems",
			Handler:    _JudgeService_GetProblems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JudgeSubmission",
			Handler:       _JudgeService_JudgeSubmission_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "judge_service_protos/judge_service.proto",
}
